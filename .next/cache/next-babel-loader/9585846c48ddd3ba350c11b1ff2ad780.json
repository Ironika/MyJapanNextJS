{"ast":null,"code":"const axios = require('axios');\n\nconst convert = require('xml-js');\n\nconst {\n  scansList,\n  animeList\n} = require('../mangas');\n\nconst fetchRss = async url => {\n  const response = await axios.get(url);\n  const json = JSON.parse(convert.xml2json(response.data, {\n    compact: true,\n    spaces: 4\n  }));\n  return json;\n};\n\nconst isInList = (title, type) => {\n  let isInList = false;\n  let list = scansList;\n  if (type === 'animes') list = animeList;\n\n  for (let item of list) {\n    if (title.includes(item)) isInList = true;\n  }\n\n  return isInList;\n};\n\nmodule.exports = {\n  fetchRss,\n  isInList\n};","map":{"version":3,"sources":["/Users/kevhoque/Documents/MyTest/myJapan/apiHelpers/Shared.js"],"names":["axios","require","convert","scansList","animeList","fetchRss","url","response","get","json","JSON","parse","xml2json","data","compact","spaces","isInList","title","type","list","item","includes","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,QAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAA2BH,OAAO,CAAC,WAAD,CAAxC;;AAEA,MAAMI,QAAQ,GAAG,MAAOC,GAAP,IAAe;AAC5B,QAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUF,GAAV,CAAvB;AACA,QAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACU,QAAR,CAAiBL,QAAQ,CAACM,IAA1B,EAAgC;AAACC,IAAAA,OAAO,EAAE,IAAV;AAAgBC,IAAAA,MAAM,EAAE;AAAxB,GAAhC,CAAX,CAAb;AACA,SAAON,IAAP;AACH,CAJD;;AAMA,MAAMO,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC9B,MAAIF,QAAQ,GAAG,KAAf;AACA,MAAIG,IAAI,GAAGhB,SAAX;AACA,MAAGe,IAAI,KAAK,QAAZ,EACIC,IAAI,GAAGf,SAAP;;AACJ,OAAI,IAAIgB,IAAR,IAAgBD,IAAhB,EAAsB;AAClB,QAAGF,KAAK,CAACI,QAAN,CAAeD,IAAf,CAAH,EACIJ,QAAQ,GAAG,IAAX;AACP;;AACD,SAAOA,QAAP;AACH,CAVD;;AAYAM,MAAM,CAACC,OAAP,GAAiB;AACblB,EAAAA,QADa;AAEbW,EAAAA;AAFa,CAAjB","sourcesContent":["const axios = require('axios')\nconst convert = require('xml-js');\nconst { scansList, animeList } = require('../mangas');\n\nconst fetchRss = async (url) => {\n    const response = await axios.get(url)\n    const json = JSON.parse(convert.xml2json(response.data, {compact: true, spaces: 4}));\n    return json\n}\n\nconst isInList = (title, type) => {\n    let isInList = false\n    let list = scansList\n    if(type === 'animes')\n        list = animeList\n    for(let item of list) {\n        if(title.includes(item))\n            isInList = true\n    }\n    return isInList\n}\n\nmodule.exports = {\n    fetchRss,\n    isInList\n};"]},"metadata":{},"sourceType":"script"}