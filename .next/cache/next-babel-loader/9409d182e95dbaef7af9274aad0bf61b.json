{"ast":null,"code":"var _jsxFileName = \"/Users/kevhoque/Documents/MyTest/myJapan/pages/scans.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport debounce from \"lodash.debounce\";\nimport LazyLoad from 'react-lazyload';\nimport { ParallaxProvider } from 'react-scroll-parallax';\nimport { ParallaxBanner } from 'react-scroll-parallax';\nimport { getScans, getScansVA } from '../helpers/Scans';\nimport { dateDiff } from '../helpers/Shared';\nimport Loader from '../components/Loader/Loader';\nimport CardVa from '../components/Scans/CardVa';\nimport Card from '../components/Scans/Card';\nimport banner from '../public/img/banner.jpg';\n\nconst Scans = () => {\n  const pageToDisplay = 12;\n  const {\n    0: nbToDisplay,\n    1: setNbToDisplay\n  } = useState(12);\n  const {\n    0: scans,\n    1: setScans\n  } = useState([]);\n  const {\n    0: scansVa,\n    1: setScansVa\n  } = useState([]);\n  const {\n    0: displayedScansVa,\n    1: setDisplayedScansVa\n  } = useState([]);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: loader,\n    1: setLoader\n  } = useState(true);\n  const {\n    0: loaderVa,\n    1: setLoaderVa\n  } = useState(true);\n  const {\n    0: deepLoader,\n    1: setDeepLoader\n  } = useState(false);\n  useEffect(() => {\n    window.onscroll = debounce(() => {\n      if (!hasMore) return;\n      let scroll = window.innerHeight + document.documentElement.scrollTop;\n      if (scroll === document.documentElement.offsetHeight) loadItems();\n    }, 100);\n  }, [displayedScansVa]);\n  useEffect(() => {\n    const fetchScans = async () => {\n      const currentScans = [...(await getScans())];\n      setScans(currentScans);\n      setLoader(false);\n    };\n\n    const fetchScansVa = async flag => {\n      const currentScansVa = [...(await getScansVA())];\n      setScansVa(currentScansVa);\n      setDisplayedScansVa(currentScansVa.slice(0, nbToDisplay));\n      setLoaderVa(false);\n\n      if (flag) {\n        setHasMore(true);\n        setDeepLoader(false);\n      }\n    };\n\n    const cache = JSON.parse(localStorage.getItem('cache'));\n\n    if (cache.scans) {\n      const currentScans = cache.scans;\n      setScans(currentScans);\n      setLoader(false);\n      if (dateDiff(new Date(cache.scansDate), new Date()).min > 10) fetchScans();\n    } else {\n      fetchScans();\n    }\n\n    if (cache.scansVa) {\n      const currentScansVa = cache.scansVa;\n      setScansVa(currentScansVa);\n      setDisplayedScansVa(currentScansVa.slice(0, pageToDisplay));\n      setLoaderVa(false);\n\n      if (dateDiff(new Date(cache.scansVaDate), new Date()).min > 10) {\n        fetchScansVa(true);\n        setDeepLoader(true);\n      }\n    } else {\n      fetchScansVa();\n    }\n  }, [deepLoader, nbToDisplay]);\n\n  const loadItems = () => {\n    let currentNbToDisplay = displayedScansVa.length + pageToDisplay;\n\n    if (currentNbToDisplay > scansVa.length) {\n      currentNbToDisplay = scansVa.length;\n      setHasMore(false);\n    }\n\n    setNbToDisplay(currentNbToDisplay);\n    setDisplayedScansVa(scansVa.slice(0, currentNbToDisplay));\n  };\n\n  return __jsx(\"div\", {\n    className: \"Scans\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(ParallaxProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, __jsx(ParallaxBanner, {\n    className: \"homescreen banner\",\n    layers: [{\n      image: banner,\n      amount: 0.5\n    }],\n    style: {\n      height: '300px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"SCANS\")), __jsx(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"card-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, loader ? __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }) : scans.map((item, index) => __jsx(LazyLoad, {\n    key: index,\n    placeholder: __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, __jsx(Card, {\n    news: item,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }))))), __jsx(\"div\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, deepLoader && __jsx(Loader, {\n    style: {\n      marginTop: '20px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"card-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, loaderVa ? __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }) : displayedScansVa.map((item, index) => __jsx(LazyLoad, {\n    key: index,\n    placeholder: __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, __jsx(CardVa, {\n    item: item,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))))))));\n};\n\nexport default Scans;","map":{"version":3,"sources":["/Users/kevhoque/Documents/MyTest/myJapan/pages/scans.js"],"names":["React","useState","useEffect","debounce","LazyLoad","ParallaxProvider","ParallaxBanner","getScans","getScansVA","dateDiff","Loader","CardVa","Card","banner","Scans","pageToDisplay","nbToDisplay","setNbToDisplay","scans","setScans","scansVa","setScansVa","displayedScansVa","setDisplayedScansVa","hasMore","setHasMore","loader","setLoader","loaderVa","setLoaderVa","deepLoader","setDeepLoader","window","onscroll","scroll","innerHeight","document","documentElement","scrollTop","offsetHeight","loadItems","fetchScans","currentScans","fetchScansVa","flag","currentScansVa","slice","cache","JSON","parse","localStorage","getItem","Date","scansDate","min","scansVaDate","currentNbToDisplay","length","image","amount","height","map","item","index","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport debounce from \"lodash.debounce\";\nimport LazyLoad from 'react-lazyload';\nimport { ParallaxProvider } from 'react-scroll-parallax';\nimport { ParallaxBanner } from 'react-scroll-parallax';\nimport { getScans, getScansVA } from '../helpers/Scans'\nimport { dateDiff } from '../helpers/Shared'\nimport Loader from '../components/Loader/Loader'\nimport CardVa from '../components/Scans/CardVa'\nimport Card from '../components/Scans/Card'\nimport banner from '../public/img/banner.jpg'\n\nconst Scans = () => {\n    const pageToDisplay = 12\n    const [nbToDisplay, setNbToDisplay] = useState(12)\n    const [scans, setScans] = useState([])\n    const [scansVa, setScansVa] = useState([])\n    const [displayedScansVa, setDisplayedScansVa] = useState([])\n    const [hasMore, setHasMore] = useState(true)\n    const [loader, setLoader] = useState(true)\n    const [loaderVa, setLoaderVa] = useState(true)\n    const [deepLoader, setDeepLoader] = useState(false)\n\n    useEffect(() => {\n        window.onscroll = debounce(() => {\n            if (!hasMore) return\n            let scroll = window.innerHeight + document.documentElement.scrollTop\n            if (scroll === document.documentElement.offsetHeight)\n                loadItems()\n        }, 100);\n    }, [displayedScansVa])\n\n    useEffect(() => {\n        const fetchScans = async () => {\n            const currentScans = [...await getScans()]\n            setScans(currentScans)\n            setLoader(false)\n        }\n        const fetchScansVa = async (flag) => {\n            const currentScansVa = [...await getScansVA()]\n            setScansVa(currentScansVa)\n            setDisplayedScansVa(currentScansVa.slice(0, nbToDisplay))\n            setLoaderVa(false)\n            if (flag) {\n                setHasMore(true)\n                setDeepLoader(false)\n            }\n        }\n\n        const cache = JSON.parse(localStorage.getItem('cache'))\n        if (cache.scans) {\n            const currentScans = cache.scans\n            setScans(currentScans)\n            setLoader(false)\n            if (dateDiff(new Date(cache.scansDate), new Date()).min > 10)\n                fetchScans()\n        } else {\n            fetchScans()\n        }\n\n        if (cache.scansVa) {\n            const currentScansVa = cache.scansVa\n            setScansVa(currentScansVa)\n            setDisplayedScansVa(currentScansVa.slice(0, pageToDisplay))\n            setLoaderVa(false)\n            if (dateDiff(new Date(cache.scansVaDate), new Date()).min > 10) {\n                fetchScansVa(true)\n                setDeepLoader(true)\n            }\n        } else {\n            fetchScansVa()\n        }\n\n    }, [deepLoader, nbToDisplay]);\n\n    const loadItems = () => {\n        let currentNbToDisplay = displayedScansVa.length + pageToDisplay\n        if (currentNbToDisplay > scansVa.length) {\n            currentNbToDisplay = scansVa.length\n            setHasMore(false)\n        }\n        setNbToDisplay(currentNbToDisplay)\n        setDisplayedScansVa(scansVa.slice(0, currentNbToDisplay))\n    }\n\n    return (\n        <div className=\"Scans\">\n            <ParallaxProvider>\n                <ParallaxBanner className=\"homescreen banner\" layers={[{ image: banner, amount: 0.5 }]} style={{ height: '300px' }}>\n                    <h1 className=\"title\">SCANS</h1>\n                </ParallaxBanner>\n                <div className=\"container\">\n                    <div className=\"left\">\n                        <div className=\"card-container\">\n                            {loader ? <Loader /> :\n                                scans.map((item, index) =>\n                                    <LazyLoad key={index} placeholder={<Loader />}>\n                                        <Card news={item} />\n                                    </LazyLoad>\n                                )\n                            }\n                        </div>\n                    </div>\n                    <div className=\"right\">\n                        {deepLoader && <Loader style={{ marginTop: '20px' }} />}\n                        <div className=\"card-container\">\n                            {loaderVa ? <Loader /> :\n                                displayedScansVa.map((item, index) =>\n                                    <LazyLoad key={index} placeholder={<Loader />}>\n                                        <CardVa item={item} />\n                                    </LazyLoad>\n                                )\n                            }\n                        </div>\n                    </div>\n                </div>\n            </ParallaxProvider>\n        </div>\n    );\n}\n\nexport default Scans;\n"]},"metadata":{},"sourceType":"module"}