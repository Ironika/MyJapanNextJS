{"ast":null,"code":"import { ADALA, NAUTIJON, MANGASNEWS } from '../rss';\nimport adala from '../public/img/adala.png';\nimport { fetchRss } from './Shared';\nimport Axios from 'axios';\nimport { API } from '../api';\nexport const getApiNews = async context => {\n  if (context) {\n    let news = await Axios.get(`${API}/api/news`);\n    return news;\n  } else {\n    let cache = JSON.parse(localStorage.getItem('cache'));\n\n    if (!cache.news) {\n      let news = await Axios.get(`${API}/api/news`);\n      cache.news = news;\n      localStorage.setItem('cache', JSON.stringify(cache));\n    }\n\n    return cache.news;\n  }\n};\nexport const getNews = async () => {\n  let news = [];\n  let adala = await getAdalaNews();\n  let nautijon = await getNautijonNews();\n  let mangasNews = await getMangasNews();\n  news = news.concat(adala, nautijon, mangasNews);\n  news.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));\n  let cache = JSON.parse(localStorage.getItem('cache'));\n  cache.news = news;\n  cache.newsDate = new Date();\n  localStorage.setItem('cache', JSON.stringify(cache));\n  return news;\n};\n\nconst getAdalaNews = async () => {\n  let json = await fetchRss(ADALA);\n  let datas = formatJsonAdala(json);\n  return datas;\n};\n\nconst getNautijonNews = async () => {\n  let json = await fetchRss(NAUTIJON);\n  let datas = formatJsonNautijon(json);\n  return datas;\n};\n\nconst getMangasNews = async () => {\n  let json = await fetchRss(MANGASNEWS);\n  let datas = formatJsonMangasNews(json);\n  return datas;\n};\n\nconst formatJsonAdala = json => {\n  let array = [];\n  const items = json.rss.channel.item;\n\n  for (var i = 0; i < items.length; i++) {\n    let item = {\n      title: items[i].title['_text'],\n      desc: items[i].description['_cdata'],\n      link: items[i].link['_text'],\n      pubDate: items[i].pubDate['_text'],\n      category: items[i].category[0]['_cdata'],\n      site: 'Adala-news',\n      img: adala\n    };\n    array.push(item);\n  }\n\n  return array;\n};\n\nconst formatJsonNautijon = json => {\n  let array = [];\n  const items = json.rss.channel.item;\n\n  for (var i = 0; i < items.length; i++) {\n    const desc = items[i].description['_cdata'].split('<br />');\n    const src = desc[0].match('(https.*.jpg)');\n    let item = {\n      title: items[i].title['_text'],\n      desc: desc[1],\n      link: items[i].link['_text'],\n      pubDate: items[i].pubDate['_text'],\n      site: 'Nautijon',\n      img: src[0]\n    };\n    array.push(item);\n  }\n\n  return array;\n};\n\nconst formatJsonMangasNews = json => {\n  let array = [];\n  const items = json.rss.channel.item;\n\n  for (var i = 0; i < items.length; i++) {\n    const desc = items[i].description['_cdata'].split('<p>');\n    const src = desc[0].match('(https.*.jpg)');\n    let item = {\n      title: items[i].title['_text'],\n      desc: desc[1].replace('</p>', ''),\n      link: items[i].link['_text'],\n      pubDate: items[i].pubDate['_text'],\n      site: 'Mangas-News',\n      img: src ? src[0] : adala\n    };\n    array.push(item);\n  }\n\n  return array;\n};","map":{"version":3,"sources":["/Users/kevhoque/Documents/MyTest/myJapan/helpers/News.js"],"names":["ADALA","NAUTIJON","MANGASNEWS","adala","fetchRss","Axios","API","getApiNews","context","news","get","cache","JSON","parse","localStorage","getItem","setItem","stringify","getNews","getAdalaNews","nautijon","getNautijonNews","mangasNews","getMangasNews","concat","sort","a","b","Date","pubDate","newsDate","json","datas","formatJsonAdala","formatJsonNautijon","formatJsonMangasNews","array","items","rss","channel","item","i","length","title","desc","description","link","category","site","img","push","split","src","match","replace"],"mappings":"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","sourcesContent":["\nimport { ADALA, NAUTIJON, MANGASNEWS } from '../rss';\nimport adala from '../public/img/adala.png';\nimport { fetchRss } from './Shared'\nimport Axios from 'axios';\nimport { API } from '../api'\n\nexport const getApiNews = async(context) => {\n    if(context) {\n        let news = await Axios.get(`${API}/api/news`)\n        return news\n    } else {\n        let cache = JSON.parse(localStorage.getItem('cache'))\n\n        if(!cache.news) {\n            let news = await Axios.get(`${API}/api/news`)\n            cache.news = news\n            localStorage.setItem('cache', JSON.stringify(cache))\n        }\n\n        return cache.news\n    }\n}\n\nexport const getNews = async () => {\n    let news = []\n    let adala = await getAdalaNews()\n    let nautijon = await getNautijonNews()\n    let mangasNews = await getMangasNews()\n\n    news = news.concat(adala, nautijon, mangasNews)\n\n    news.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate))\n\n    let cache = JSON.parse(localStorage.getItem('cache'))\n    cache.news = news\n    cache.newsDate = new Date()\n    localStorage.setItem('cache', JSON.stringify(cache))\n\n    return news\n}\n\nconst getAdalaNews = async () => {\n    let json = await fetchRss(ADALA)\n    let datas = formatJsonAdala(json)\n    return datas\n}\n\nconst getNautijonNews = async () => {\n    let json = await fetchRss(NAUTIJON)\n    let datas = formatJsonNautijon(json)\n    return datas\n}\n\nconst getMangasNews = async () => {\n    let json = await fetchRss(MANGASNEWS)\n    let datas = formatJsonMangasNews(json)\n    return datas\n}\n\nconst formatJsonAdala = (json) => {\n    let array = []\n    const items = json.rss.channel.item\n    for(var i = 0; i < items.length; i++) {\n        let item = {\n            title: items[i].title['_text'],\n            desc: items[i].description['_cdata'],\n            link: items[i].link['_text'],\n            pubDate: items[i].pubDate['_text'],\n            category: items[i].category[0]['_cdata'],\n            site: 'Adala-news',\n            img: adala\n        }\n        array.push(item)\n    }\n    return array\n}\n\nconst formatJsonNautijon = (json) => {\n    let array = []\n    const items = json.rss.channel.item\n    for(var i = 0; i < items.length; i++) {\n        const desc = items[i].description['_cdata'].split('<br />')\n        const src = desc[0].match('(https.*.jpg)')\n        let item = {\n            title: items[i].title['_text'],\n            desc: desc[1],\n            link: items[i].link['_text'],\n            pubDate: items[i].pubDate['_text'],\n            site: 'Nautijon',\n            img: src[0]\n        }\n        array.push(item)\n    }\n    return array\n}\n\nconst formatJsonMangasNews = (json) => {\n    let array = []\n    const items = json.rss.channel.item\n    for(var i = 0; i < items.length; i++) {\n        const desc = items[i].description['_cdata'].split('<p>')\n        const src = desc[0].match('(https.*.jpg)')\n        let item = {\n            title: items[i].title['_text'],\n            desc: desc[1].replace('</p>', ''),\n            link: items[i].link['_text'],\n            pubDate: items[i].pubDate['_text'],\n            site: 'Mangas-News',\n            img: src ? src[0] : adala\n        }\n        array.push(item)\n    }\n    return array\n}"]},"metadata":{},"sourceType":"module"}