{"ast":null,"code":"var _jsxFileName = \"/Users/kevhoque/Documents/MyTest/myJapan/pages/animes.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { getAnimes } from '../helpers/Animes';\nimport { dateDiff } from '../helpers/Shared';\nimport debounce from \"lodash.debounce\";\nimport { ParallaxProvider } from 'react-scroll-parallax';\nimport { ParallaxBanner } from 'react-scroll-parallax';\nimport Card from '../components/Animes/Card';\nimport Loader from '../components/Loader/Loader';\nimport banner from '../public/img/banner.jpg';\n\nconst Animes = () => {\n  const pageToDisplay = 9;\n  const {\n    0: animes,\n    1: setAnimes\n  } = useState([]);\n  const {\n    0: displayedAnimes,\n    1: setDisplayedAnimes\n  } = useState([]);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: loader,\n    1: setLoader\n  } = useState(true);\n  const {\n    0: deepLoader,\n    1: setDeepLoader\n  } = useState(false);\n  useEffect(() => {\n    const fetchDatas = async () => {\n      const currentAnimes = await getAnimes();\n      setAnimes(currentAnimes);\n      setDisplayedAnimes(currentAnimes.slice(0, pageToDisplay));\n      setLoader(false);\n\n      if (deepLoader) {\n        setDeepLoader(false);\n      }\n    };\n\n    const cache = JSON.parse(localStorage.getItem('cache'));\n\n    if (cache.animes) {\n      const currentAnimes = cache.animes;\n      setAnimes(currentAnimes);\n      setDisplayedAnimes(currentAnimes.slice(0, pageToDisplay));\n      setLoader(false);\n\n      if (dateDiff(new Date(cache.animesDate), new Date()).min > 10) {\n        fetchDatas();\n        setDeepLoader(true);\n      }\n    } else {\n      fetchDatas();\n    }\n\n    window.onscroll = debounce(() => {\n      if (!hasMore) return;\n      let scroll = window.innerHeight + document.documentElement.scrollTop;\n      if (scroll === document.documentElement.offsetHeight) loadItems();\n    }, 100);\n  }, [deepLoader]);\n\n  const loadItems = () => {\n    let nbToDisplay = displayedAnimes.length + pageToDisplay;\n\n    if (nbToDisplay > animes.length) {\n      nbToDisplay = animes.length;\n      setHasMore(false);\n    }\n\n    setDisplayedAnimes(animes.slice(0, nbToDisplay));\n  };\n\n  return __jsx(\"div\", {\n    className: \"Animes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(ParallaxProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(ParallaxBanner, {\n    className: \"homescreen banner\",\n    layers: [{\n      image: banner,\n      amount: 0.5\n    }],\n    style: {\n      height: '300px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"ANIMES\")), deepLoader && __jsx(Loader, {\n    style: {\n      marginTop: '20px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"card-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, loader ? __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }) : displayedAnimes.map((item, index) => __jsx(Card, {\n    key: index,\n    item: item,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })))));\n};\n\nexport default Animes;","map":{"version":3,"sources":["/Users/kevhoque/Documents/MyTest/myJapan/pages/animes.js"],"names":["React","useState","useEffect","getAnimes","dateDiff","debounce","ParallaxProvider","ParallaxBanner","Card","Loader","banner","Animes","pageToDisplay","animes","setAnimes","displayedAnimes","setDisplayedAnimes","hasMore","setHasMore","loader","setLoader","deepLoader","setDeepLoader","fetchDatas","currentAnimes","slice","cache","JSON","parse","localStorage","getItem","Date","animesDate","min","window","onscroll","scroll","innerHeight","document","documentElement","scrollTop","offsetHeight","loadItems","nbToDisplay","length","image","amount","height","marginTop","map","item","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAnimes } from '../helpers/Animes'\nimport { dateDiff } from '../helpers/Shared'\nimport debounce from \"lodash.debounce\";\nimport { ParallaxProvider } from 'react-scroll-parallax';\nimport { ParallaxBanner } from 'react-scroll-parallax';\nimport Card from '../components/Animes/Card'\nimport Loader from '../components/Loader/Loader'\nimport banner from '../public/img/banner.jpg'\n\nconst Animes = () => {\n    const pageToDisplay = 9\n    const [animes, setAnimes] = useState([])\n    const [displayedAnimes, setDisplayedAnimes] = useState([])\n    const [hasMore, setHasMore] = useState(true)\n    const [loader, setLoader] = useState(true)\n    const [deepLoader, setDeepLoader] = useState(false)\n\n    useEffect(() => {\n        const fetchDatas = async () => {\n            const currentAnimes = await getAnimes()\n            setAnimes(currentAnimes)\n            setDisplayedAnimes(currentAnimes.slice(0, pageToDisplay))\n            setLoader(false)\n            if(deepLoader) {\n                setDeepLoader(false)\n            }\n        }\n\n        const cache = JSON.parse(localStorage.getItem('cache'))\n        if(cache.animes) {\n            const currentAnimes = cache.animes\n            setAnimes(currentAnimes)\n            setDisplayedAnimes(currentAnimes.slice(0, pageToDisplay))\n            setLoader(false)\n            if(dateDiff(new Date(cache.animesDate), new Date()).min > 10) {\n                fetchDatas()\n                setDeepLoader(true)\n            }\n        } else {\n            fetchDatas()\n        }\n\n\n        window.onscroll = debounce(() => {\n            if (!hasMore) return\n            let scroll = window.innerHeight + document.documentElement.scrollTop\n            if ( scroll === document.documentElement.offsetHeight)\n                loadItems()\n        }, 100);\n\n    }, [deepLoader]);\n\n    const loadItems = () => {\n        let nbToDisplay = displayedAnimes.length + pageToDisplay\n        if(nbToDisplay > animes.length) {\n            nbToDisplay = animes.length\n            setHasMore(false)\n        }\n        setDisplayedAnimes(animes.slice(0, nbToDisplay))\n    }\n\n    return (\n        <div className=\"Animes\">\n            <ParallaxProvider>\n                <ParallaxBanner className=\"homescreen banner\" layers={[{ image: banner, amount: 0.5 }]} style={{ height: '300px' }}>\n                    <h1 className=\"title\">ANIMES</h1>\n                </ParallaxBanner>\n                {deepLoader && <Loader style={{marginTop: '20px'}} />}\n                <div className=\"card-container\">\n                    {   loader ? <Loader /> :\n                        displayedAnimes.map((item, index) =>\n                            <Card key={index} item={item} />\n                        )\n                    }\n                </div>\n            </ParallaxProvider>\n        </div>\n    );\n}\n\nexport default Animes;\n"]},"metadata":{},"sourceType":"module"}