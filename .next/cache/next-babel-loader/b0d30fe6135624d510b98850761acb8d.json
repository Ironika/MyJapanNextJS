{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nimport { scansList, animeList } from '../mangas';\n\nvar convert = require('xml-js');\n\nexport var fetchRss = function fetchRss(url) {\n  var response, json;\n  return _regeneratorRuntime.async(function fetchRss$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://cors-anywhere.herokuapp.com/' + url));\n\n        case 2:\n          response = _context.sent;\n          json = JSON.parse(convert.xml2json(response.data, {\n            compact: true,\n            spaces: 4\n          }));\n          return _context.abrupt(\"return\", json);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var isInList = function isInList(title, type) {\n  var isInList = false;\n  var list = scansList;\n  if (type === 'animes') list = animeList;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(list), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var item = _step.value;\n      if (title.includes(item)) isInList = true;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return isInList;\n};\nexport function dateDiff(date1, date2) {\n  var diff = {};\n  var tmp = date2 - date1;\n  tmp = Math.floor(tmp / 1000);\n  diff.sec = tmp % 60;\n  tmp = Math.floor((tmp - diff.sec) / 60);\n  diff.min = tmp % 60;\n  tmp = Math.floor((tmp - diff.min) / 60);\n  diff.hour = tmp % 24;\n  tmp = Math.floor((tmp - diff.hour) / 24);\n  diff.day = tmp;\n  return diff;\n}","map":{"version":3,"sources":["/Users/kevhoque/Documents/MyTest/myJapan/helpers/Shared.js"],"names":["axios","scansList","animeList","convert","require","fetchRss","url","get","response","json","JSON","parse","xml2json","data","compact","spaces","isInList","title","type","list","item","includes","dateDiff","date1","date2","diff","tmp","Math","floor","sec","min","hour","day"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,QAAD,CAArB;;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACGN,KAAK,CAACO,GAAN,CAAU,yCAAyCD,GAAnD,CADH;;AAAA;AACdE,UAAAA,QADc;AAEdC,UAAAA,IAFc,GAEPC,IAAI,CAACC,KAAL,CAAWR,OAAO,CAACS,QAAR,CAAiBJ,QAAQ,CAACK,IAA1B,EAAgC;AAACC,YAAAA,OAAO,EAAE,IAAV;AAAgBC,YAAAA,MAAM,EAAE;AAAxB,WAAhC,CAAX,CAFO;AAAA,2CAGbN,IAHa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;AAMP,OAAO,IAAMO,QAAQ,GAAG,kBAACC,KAAD,EAAQC,IAAR,EAAiB;AACrC,MAAIF,QAAQ,GAAG,KAAf;AACA,MAAIG,IAAI,GAAGlB,SAAX;AACA,MAAGiB,IAAI,KAAK,QAAZ,EACIC,IAAI,GAAGjB,SAAP;AAJiC;AAAA;AAAA;;AAAA;AAKrC,sCAAgBiB,IAAhB,4GAAsB;AAAA,UAAdC,IAAc;AAClB,UAAGH,KAAK,CAACI,QAAN,CAAeD,IAAf,CAAH,EACIJ,QAAQ,GAAG,IAAX;AACP;AARoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASrC,SAAOA,QAAP;AACH,CAVM;AAYP,OAAO,SAASM,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAA+B;AAClC,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,GAAG,GAAGF,KAAK,GAAGD,KAAlB;AAEAG,EAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAC,IAAf,CAAN;AACAD,EAAAA,IAAI,CAACI,GAAL,GAAWH,GAAG,GAAG,EAAjB;AAEAA,EAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACF,GAAG,GAACD,IAAI,CAACI,GAAV,IAAe,EAA1B,CAAN;AACAJ,EAAAA,IAAI,CAACK,GAAL,GAAWJ,GAAG,GAAG,EAAjB;AAEAA,EAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACF,GAAG,GAACD,IAAI,CAACK,GAAV,IAAe,EAA1B,CAAN;AACAL,EAAAA,IAAI,CAACM,IAAL,GAAYL,GAAG,GAAG,EAAlB;AAEAA,EAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACF,GAAG,GAACD,IAAI,CAACM,IAAV,IAAgB,EAA3B,CAAN;AACAN,EAAAA,IAAI,CAACO,GAAL,GAAWN,GAAX;AAEA,SAAOD,IAAP;AACH","sourcesContent":["import axios from 'axios';\nimport { scansList, animeList } from '../mangas'\n\nvar convert = require('xml-js');\n\nexport const fetchRss = async (url) => {\n    const response = await axios.get('https://cors-anywhere.herokuapp.com/' + url)\n    const json = JSON.parse(convert.xml2json(response.data, {compact: true, spaces: 4}));\n    return json\n}\n\nexport const isInList = (title, type) => {\n    let isInList = false\n    let list = scansList\n    if(type === 'animes')\n        list = animeList\n    for(let item of list) {\n        if(title.includes(item))\n            isInList = true\n    }\n    return isInList\n}\n\nexport function dateDiff(date1, date2){\n    var diff = {}\n    var tmp = date2 - date1;\n\n    tmp = Math.floor(tmp/1000);\n    diff.sec = tmp % 60;\n\n    tmp = Math.floor((tmp-diff.sec)/60);\n    diff.min = tmp % 60;\n\n    tmp = Math.floor((tmp-diff.min)/60);\n    diff.hour = tmp % 24;\n\n    tmp = Math.floor((tmp-diff.hour)/24);\n    diff.day = tmp;\n\n    return diff;\n}"]},"metadata":{},"sourceType":"module"}