{"version":3,"file":"static/webpack/static/development/pages/scans.js.33c3aef3b391690e2ae3.hot-update.js","sources":["webpack:///./pages/scans.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport debounce from \"lodash.debounce\";\nimport LazyLoad from 'react-lazyload';\nimport { ParallaxProvider } from 'react-scroll-parallax';\nimport { ParallaxBanner } from 'react-scroll-parallax';\nimport { getScans, getScansVA } from '../helpers/Scans'\nimport { dateDiff } from '../helpers/Shared'\nimport Loader from '../components/Loader/Loader'\nimport CardVa from '../components/Scans/CardVa'\nimport Card from '../components/Scans/Card'\nimport banner from '../public/img/banner.jpg'\n\nconst Scans = () => {\n  const pageToDisplay = 12\n  const [nbToDisplay, setNbToDisplay] = useState(12)\n  const [scans, setScans] = useState([])\n  const [scansVa, setScansVa] = useState([])\n  const [displayedScansVa, setDisplayedScansVa] = useState([])\n  const [hasMore, setHasMore] = useState(true)\n  const [loader, setLoader] = useState(true)\n  const [loaderVa, setLoaderVa] = useState(true)\n  const [deepLoader, setDeepLoader] = useState(false)\n\n  useEffect(() => {\n    const fetchScans = async () => {\n      const currentScans = [...await getScans()]\n      setScans(currentScans)\n      setLoader(false)\n    }\n    const fetchScansVa = async (flag) => {\n      const currentScansVa = [...await getScansVA()]\n      setScansVa(currentScansVa)\n      setDisplayedScansVa(currentScansVa.slice(0, nbToDisplay))\n      setLoaderVa(false)\n      if(flag) {\n        setHasMore(true)\n        setDeepLoader(false)\n      }\n    }\n\n    const cache = JSON.parse(localStorage.getItem('cache'))\n    if (cache.scans) {\n      const currentScans = cache.scans\n      setScans(currentScans)\n      setLoader(false)\n      if (dateDiff(new Date(cache.scansDate), new Date()).min > 10)\n        fetchScans()\n    } else {\n      fetchScans()\n    }\n\n    if (cache.scansVa) {\n      const currentScansVa = cache.scansVa\n      setScansVa(currentScansVa)\n      setDisplayedScansVa(currentScansVa.slice(0, pageToDisplay))\n      setLoaderVa(false)\n      if (dateDiff(new Date(cache.scansVaDate), new Date()).min > 10) {\n        fetchScansVa(true)\n        setDeepLoader(true)\n      }\n    } else {\n      fetchScansVa()\n    }\n\n    window.onscroll = debounce(() => {\n        if (!hasMore) return\n        let scroll = window.innerHeight + document.documentElement.scrollTop\n        if (scroll === document.documentElement.offsetHeight)\n          loadItems()\n      }, 100);\n\n  }, [deepLoader, nbToDisplay]);\n\n  const loadItems = () => {\n    let currentNbToDisplay = displayedScansVa.length + pageToDisplay\n    if (currentNbToDisplay > scansVa.length) {\n      currentNbToDisplay = scansVa.length\n      setHasMore(false)\n    }\n    setNbToDisplay(currentNbToDisplay)\n    setDisplayedScansVa(scansVa.slice(0, currentNbToDisplay))\n  }\n\n  return (\n    <div className=\"Scans\">\n      <ParallaxProvider>\n        <ParallaxBanner className=\"homescreen banner\" layers={[{ image: banner, amount: 0.5 }]} style={{ height: '300px' }}>\n          <h1 className=\"title\">SCANS</h1>\n        </ParallaxBanner>\n        <div className=\"container\">\n          <div className=\"left\">\n            <div className=\"card-container\">\n              {loader ? <Loader /> :\n                scans.map((item, index) =>\n                  <LazyLoad key={index} placeholder={<Loader />}>\n                    <Card news={item} />\n                  </LazyLoad>\n                )\n              }\n            </div>\n          </div>\n          <div className=\"right\">\n            {deepLoader && <Loader style={{marginTop: '20px'}}/>}\n            <div className=\"card-container\">\n              {loaderVa ? <Loader /> :\n                displayedScansVa.map((item, index) =>\n                  <LazyLoad key={index} placeholder={<Loader />}>\n                    <CardVa item={item} />\n                  </LazyLoad>\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </ParallaxProvider>\n    </div>\n  );\n}\n\nexport default Scans;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAYA;AACA;AACA;;;;A","sourceRoot":""}